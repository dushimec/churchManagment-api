generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MEMBER
  PASTOR
  ADMIN
  CHOIR_LEADER
  TREASURER
}

enum AssetCategory {
  PROFILE_IMAGE
  DOCUMENT
  SERMON_MEDIA
  EVENT_PHOTO
  OTHER
}

enum Language {
  EN
  FR
}

enum MembershipStatus {
  NEW
  BAPTIZED
  CONFIRMED
  ACTIVE
  INACTIVE
}

enum ServiceType {
  SUNDAY_SERVICE
  BIBLE_STUDY
  CHOIR_PRACTICE
  PRAYER_MEETING
  OTHER
}

enum EventType {
  WEDDING
  BAPTISM
  CONFERENCE
  RETREAT
  SEMINAR
  OTHER
}

enum ContributionType {
  TITHE
  OFFERING
  DONATION
  PLEDGE
}

enum PaymentMethod {
  MOBILE_MONEY
  CREDIT_CARD
  BANK_TRANSFER
  CASH
}

enum AssetType {
  IMAGE
  DOCUMENT
  VIDEO
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  phone             String?          @unique
  password          String
  firstName         String
  lastName          String
  role              Role             @default(MEMBER)
  language          Language         @default(EN)
  avatarUrl         String?
  isVerified        Boolean          @default(false)
  verificationToken String?
  verificationCode  Int?
  verificationCodeExpiresAt DateTime?
  isDeleted         Boolean          @default(false)
  isEmailVerified   Boolean          @default(false)
  resetToken        String?
  resetTokenExpiry  DateTime?
  profileImageId    String?          @unique
  profileImage      Asset?  @relation("ProfileImage", fields: [profileImageId], references: [id])
  assets            Asset[] @relation("UserAssets")
  lastLogin         DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  status            MembershipStatus @default(NEW)
  is2FAEnabled      Boolean          @default(false)
  phoneVerified     Boolean          @default(false)
  currentRefreshTokenVersion Int      @default(0)

  notifications     Notification[]
  sentMessages      Message[] @relation("Sender")
  receivedMessages  Message[] @relation("Receiver")
  prayerRequestsAsMember PrayerRequest[] @relation("PrayerRequestMember")
  prayerRequestsAsPastor PrayerRequest[] @relation("PrayerRequestPastor")
  counselingAppointmentsAsMember CounselingAppointment[] @relation("CounselingAppointmentMember")
  counselingAppointmentsAsPastor CounselingAppointment[] @relation("CounselingAppointmentPastor")
  servicesLed       Service[] @relation("Preacher")
  servicesUshered   Service[] @relation("Ushers")
  choirServicesLed  Service[] @relation("ChoirLeader")
  marriageRequestsAsBride   MarriageRequest[] @relation("Bride")
  marriageRequestsAsGroom   MarriageRequest[] @relation("Groom")
  marriageRequests          MarriageRequest[] @relation("MarriageRequester")
  marriageApproved          MarriageRequest[] @relation("MarriageApprover")
  baptismRequests           BaptismRequest[]  @relation("BaptismRequester")
  baptismApproved           BaptismRequest[]  @relation("BaptismApprover")
  contributions             Contribution[]    @relation("MemberContributions")
  verifiedContributions     Contribution[]    @relation("Verifier")
  Attendance                Attendance[]
  Sermon                    Sermon[]
  Event                     Event[]
  EventRegistration         EventRegistration[]
  Media                     Media[]
  loginActivities           LoginActivity[]
  
  @@map("users")
}

model Asset {
  id                 String           @id @default(cuid())
  url                String
  type               AssetType
  category           AssetCategory
  publicId           String           @unique
  userId             String?
  createdAt          DateTime         @default(now())
  user               User?            @relation("UserAssets", fields: [userId], references: [id], onDelete: Cascade)
  profileImageOf     User?            @relation("ProfileImage")
}

model Member {
  id                    String         @id @default(cuid())
  names                 String
  email                 String?
  phoneNumber           String?
  idNumber              String?
  district              String?
  sector                String?
  cell                  String?
  churchCell            String?
  dateOfBirth           DateTime?
  gender                String?
  maritalStatus         String?
  nationality           String?
  occupation            String?
  address               String?
  baptismDate           DateTime?
  confirmationDate      DateTime?
  dateJoined            DateTime       @default(now())
  spiritualMaturity     String?
  ministryPreferences   String[]
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt

  @@map("members")
}

model Service {
  id              String       @id @default(cuid())
  title           String
  description     String?
  serviceType     ServiceType
  date            DateTime
  location        String
  preacher        User?        @relation("Preacher", fields: [preacherId], references: [id])
  preacherId      String?
  ushers          User[]       @relation("Ushers")
  choirLeader     User?        @relation("ChoirLeader", fields: [choirLeaderId], references: [id])
  choirLeaderId   String?
  startTime       DateTime
  endTime         DateTime
  attendanceCount Int          @default(0)
  attendance      Attendance[]
  sermon          Sermon?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("services")
}

model Attendance {
  id        String   @id @default(cuid())
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  member    User     @relation(fields: [memberId], references: [id])
  memberId  String
  method    String
  timestamp DateTime @default(now())

  @@unique([serviceId, memberId])
  @@map("attendance")
}

model Sermon {
  id         String   @id @default(cuid())
  title      String
  preacher   User     @relation(fields: [preacherId], references: [id])
  preacherId String
  serviceId  String?  @unique
  service    Service? @relation(fields: [serviceId], references: [id])
  date       DateTime @default(now())
  theme      String?
  scripture  String?
  audioUrl   String?
  videoUrl   String?
  text       String?
  tags       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Media      Media[]

  @@map("sermons")
}

model Event {
  id              String              @id @default(cuid())
  title           String
  eventType       EventType
  description     String?
  startDate       DateTime
  endDate         DateTime
  location        String
  maxParticipants Int?
  organizer       User                @relation(fields: [organizerId], references: [id])
  organizerId     String
  status          RequestStatus       @default(PENDING)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  registrations   EventRegistration[]
  notifications   Notification[]
  MarriageRequest MarriageRequest[]
  BaptismRequest  BaptismRequest[]
  Media           Media[]

  @@map("events")
}

model EventRegistration {
  id           String        @id @default(cuid())
  event        Event         @relation(fields: [eventId], references: [id])
  eventId      String
  member       User          @relation(fields: [memberId], references: [id])
  memberId     String
  registeredAt DateTime      @default(now())
  status       RequestStatus @default(PENDING)

  @@unique([eventId, memberId])
  @@map("event_registrations")
}

model MarriageRequest {
  id                 String        @id @default(cuid())
  bride              User          @relation("Bride", fields: [brideId], references: [id])
  brideId            String
  groom              User          @relation("Groom", fields: [groomId], references: [id])
  groomId            String
  weddingDate        DateTime
  location           String?
  witness1Name       String
  witness1Phone      String
  witness2Name       String
  witness2Phone      String
  documentsSubmitted String[]
  brideIdDocumentUrl String?
  groomIdDocumentUrl String?
  requester          User          @relation("MarriageRequester", fields: [requesterId], references: [id])
  requesterId        String
  status             RequestStatus @default(PENDING)
  approvedBy         User?         @relation("MarriageApprover", fields: [approvedById], references: [id])
  approvedById       String?
  approvedAt         DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  event              Event?        @relation(fields: [eventId], references: [id])
  eventId            String?

  @@index([brideId, groomId], name: "marriage_bride_groom_idx")
  @@map("marriage_requests")
}

model BaptismRequest {
  id             String        @id @default(cuid())
  childName      String
  dateOfBirth    DateTime
  parent1Name    String
  parent1Phone   String
  parent1Email   String?
  parent2Name    String?
  parent2Phone   String?
  parent2Email   String?
  pastorNotes    String?
  requester      User          @relation("BaptismRequester", fields: [requesterId], references: [id])
  requesterId    String
  status         RequestStatus @default(PENDING)
  approvedBy     User?         @relation("BaptismApprover", fields: [approvedById], references: [id])
  approvedById   String?
  approvedAt     DateTime?
  scheduledDate  DateTime?
  certificateUrl String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  event          Event?        @relation(fields: [eventId], references: [id])
  eventId        String?

  @@map("baptism_requests")
}

model Contribution {
  id               String           @id @default(cuid())
  member           User             @relation("MemberContributions", fields: [memberId], references: [id])
  memberId         String
  amount           Decimal
  contributionType ContributionType
  paymentMethod    PaymentMethod
  transactionId    String
  receiptUrl       String?
  notes            String?
  date             DateTime         @default(now())
  verified         Boolean          @default(false)
  verifiedBy       User?            @relation("Verifier", fields: [verifiedById], references: [id])
  verifiedById     String?
  createdAt        DateTime         @default(now())

  @@map("contributions")
}

model Media {
  id           String   @id @default(cuid())
  title        String
  description  String?
  url          String
  fileType     String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  eventId      String?
  eventIdRef   Event?   @relation(fields: [eventId], references: [id])
  sermonId     String?
  sermonIdRef  Sermon?  @relation(fields: [sermonId], references: [id])
  createdAt    DateTime @default(now())

  @@map("media")
}

model LoginActivity {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ip        String?
  userAgent String?
  success   Boolean
  timestamp DateTime @default(now())

  @@map("login_activities")
}

model Notification {
  id             String   @id @default(cuid())
  recipient      User     @relation(fields: [recipientId], references: [id])
  recipientId    String
  title          String
  message        String
  type           String
  read           Boolean  @default(false)
  sentAt         DateTime @default(now())
  relatedEventId String?
  relatedEvent   Event?   @relation(fields: [relatedEventId], references: [id])

  @@map("notifications")
}

model Message {
  id         String   @id @default(cuid())
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId String
  content    String
  read       Boolean  @default(false)
  timestamp  DateTime @default(now())

  @@map("messages")
}

model PrayerRequest {
  id          String    @id @default(cuid())
  member      User      @relation("PrayerRequestMember", fields: [memberId], references: [id])
  memberId    String
  request     String
  isPrivate   Boolean   @default(true)
  responded   Boolean   @default(false)
  response    String?
  pastor      User?     @relation("PrayerRequestPastor", fields: [pastorId], references: [id])
  pastorId    String?
  respondedAt DateTime?
  createdAt   DateTime  @default(now())

  @@map("prayer_requests")
}

model CounselingAppointment {
  id        String        @id @default(cuid())
  member    User          @relation("CounselingAppointmentMember", fields: [memberId], references: [id])
  memberId  String
  pastor    User          @relation("CounselingAppointmentPastor", fields: [pastorId], references: [id])
  pastorId  String
  date      DateTime
  duration  Int
  purpose   String
  status    RequestStatus @default(PENDING)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("counseling_appointments")
}